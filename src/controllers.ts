import { Request, Response } from "express";
import { executeQuery } from "./utils/db";
import { OkPacket } from "mysql2";

export const createConversationThread = async (req: Request, res: Response): Promise<void> => {
  try {
    // Extract necessary data from the request body
    const { participants } = req.body;

    // Save the conversation thread to the database
    const query = "INSERT INTO thread VALUES (NULL)";
    const result = (await executeQuery(query)) as unknown as OkPacket;

    // Retrieve the auto-generated thread ID
    const threadId = result.insertId;

    // Insert participants into the thread
    const participantValues = participants
      .map((participantId: number) => `(${threadId}, ${participantId})`)
      .join(",");
    const participantsQuery = `INSERT INTO participants (thread_threadId, user_user_ID) VALUES ${participantValues}`;
    await executeQuery(participantsQuery);

    res.sendStatus(201);
  } catch (error) {
    console.error("Error creating conversation thread:", error);
    res.sendStatus(500);
  }
};

export const addParticipantsToThread = async (req: Request, res: Response): Promise<void> => {
  try {
    const { threadId } = req.params;
    const { participants } = req.body;

    // Insert participants into the thread
    const participantValues = participants
      .map((participantId: number) => `(${threadId}, ${participantId})`)
      .join(",");
    const participantsQuery = `INSERT INTO participants (thread_threadId, user_user_ID) VALUES ${participantValues}`;
    await executeQuery(participantsQuery);

    res.sendStatus(200);
  } catch (error) {
    console.error("Error adding participants to thread:", error);
    res.sendStatus(500);
  }
};

export const saveMessage = async (req: Request, res: Response): Promise<void> => {
  try {
    const { sendDate, body, threadThreadId, userUserId } = req.body;

    // Save the message to the database
    const query = `
      INSERT INTO message (sendDate, body, thread_threadId, user_user_ID)
      VALUES (?, ?, ?, ?)
    `;
    await executeQuery(query, [sendDate, body, threadThreadId, userUserId]);

    res.sendStatus(201);
  } catch (error) {
    console.error("Error saving message:", error);
    res.sendStatus(500);
  }
};

export const generateResponse = async (req: Request, res: Response): Promise<void> => {
  try {
    const { messageId } = req.params;

    // Implement the logic to generate a response from chatGPT

    // Example response generation logic:
    const response = `This is a response generated by chatGPT for message ${messageId}`;

    res.status(200).json({ response });
  } catch (error) {
    console.error("Error generating response:", error);
    res.sendStatus(500);
  }
};

export const saveResponse = async (req: Request, res: Response): Promise<void> => {
  try {
    const { messageId } = req.params;
    const { response } = req.body;

    // Save the response to the database
    const query = `
      INSERT INTO message (sendDate, body, thread_threadId, user_user_ID)
      VALUES (?, ?, (SELECT thread_threadId FROM message WHERE messageId = ?), ?)
    `;
    await executeQuery(query, [new Date(), response, messageId /* chatGPT_userID */]);

    res.sendStatus(201);
  } catch (error) {
    console.error("Error saving response:", error);
    res.sendStatus(500);
  }
};

export const getConversationThreadsByUser = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { userId } = req.params;

    // Get conversation threads for the user from the database
    const query = `
      SELECT t.threadId
      FROM thread t
      JOIN participants p ON t.threadId = p.thread_threadId
      WHERE p.user_user_ID = ?
    `;
    const threads = await executeQuery<{ threadId: number }>(query, [userId]);

    res.status(200).json({ threads });
  } catch (error) {
    console.error("Error getting conversation threads by user:", error);
    res.sendStatus(500);
  }
};

export const groupMessagesByThread = async (req: Request, res: Response): Promise<void> => {
  try {
    const { threadId } = req.params;

    // Get messages for the thread from the database
    const query = `
      SELECT m.messageId, m.sendDate, m.body, m.user_user_ID
      FROM message m
      WHERE m.thread_threadId = ?
      ORDER BY m.sendDate ASC
    `;
    const messages = await executeQuery<{
      messageId: number;
      sendDate: Date;
      body: string;
      user_user_ID: number;
    }>(query, [threadId]);

    // Group messages by thread
    const groupedMessages = messages.reduce<{ [threadId: string]: any[] }>(
      (result, message) => {
        const { messageId, sendDate, body, user_user_ID } = message;
        if (!result[threadId]) {
          result[threadId] = [];
        }
        result[threadId].push({
          messageId,
          sendDate,
          body,
          sender_userID: user_user_ID,
        });
        return result;
      },
      {}
    );

    res.status(200).json({ messages: groupedMessages });
  } catch (error) {
    console.error("Error grouping messages by thread:", error);
    res.sendStatus(500);
  }
};
